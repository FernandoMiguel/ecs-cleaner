#!/usr/bin/env bash
#
# Version: 0.0.5
#
# Logs in to ECR for the current user
#
# Gives helpful prompts and messages when something goes wrong (like the user doesn't have the AWS CLI set up). Detects
# the following scenarios:
#
#  - Missing Docker
#  - Missing AWS CLI
#  - Old AWS CLI version
#  - No AWS authentication
#  - AWS authorization expired (max 12 hours, check mtime on docker config)
#  - Anything else that prevents `docker push` or `docker pull` from working (to/from $test_image)
#
# In order to test the authentication, we expect a 'scratch' image to be pre-pushed to $test_image. Because the
# official 'scratch' image cannot be pushed or pulled, you can create your own minimal image with:
#
#    docker pull tianon/true \
#      && docker tag tianon/true $ecr/test:test \
#      && docker push $ecr/test:test
#
# Changelog:
#  - checkDockerConfigured checks for non-existent config.json
#

test_push=no
test_pull=yes
ecr=542640492856.dkr.ecr.us-west-2.amazonaws.com
test_image=$ecr/test:test
aws_cli_min_version=1.10.28
config=~/.docker/config.json
max_auth_age=$((60 * 60 * 11)) # 1 hour grace from 12 hour expiry

DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
source "$DIR/_common"

set +e

if [[ $EUID -eq 0 ]]; then
  fail "Cowardly refusing to run as root"
fi

function checkDockerInstalled() {
  hash docker > /dev/null 2>&1

  if [ $? -ne 0 ]; then
    fail "You don't seem to have the Docker installed. Download Docker/Docker for Mac and retry."
  fi
}

function checkDockerConfigured() {
  if [ ! -f $config ]; then
    info "The Docker config file ($config) does not exist! Logging in for the first time..."
    mkdir -p $(dirname $config)
    return
  fi

  if [ ! -f $config ]; then
    warning "Couldn't find Docker config file $config - let's create it"
    return
  fi

  if [ ! -O $config ]; then
    info "The Docker config file ($config) is not owned by the current user ($EUID). Chowning..."
    sudo chown -R $(whoami): $(dirname $config)
    ok "Docker config directory chowned"

    if [ ! -O $config ]; then
      fail "Docker config file is still not owned by this user!"
    fi
  fi

  if [ ! -w $config ]; then
    fail "Could not write to Docker config file"
  fi

  grep $ecr ~/.docker/config.json > /dev/null 2>&1
  contains=$?

  if [ $contains -ne 0 ]; then
    warning "No ECR authentication found in $config - let's add it"
    return
  fi

  now=$(date +%s)
  modified=$(mtime $config)
  diff=$((now - modified))

  if [[ $diff -gt $max_auth_age || $contains -ne 0 ]]; then
    warning "Authentication is out-of-date!"
    return
  else
    info "Authentication seems up-to-date. Time to test it."
  fi

  if [ $test_pull == 'yes' ]; then
    set +e
    step "docker pull $test_image" test docker-pull 0 1

    if [ $? -ne 0 ]; then
      return
    fi
  fi

  if [ $test_push == 'yes' ]; then
    step "docker push $test_image" test docker-push 0 1

    if [ $? -ne 0 ]; then
      return
    fi
  fi

  ok "All done: docker authentication was already up-to-date."
  exit 0
}

function checkAwsInstalled() {
  hash aws > /dev/null 2>&1

  if [ $? -ne 0 ]; then
    info "You don't seem to have the AWS CLI tools installed. You can install them with 'brew install awscli'."
    executeOnOsFamily darwin 'brew install awscli && brew link awscli' install-brew awscli
    executeOnOsFamily linux  'sudo pip install awscli -U' install-pip awscli

    # Recheck installed
    hash aws > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      fail "Failed to install AWS CLI (sometimes because of conflicting symlinks in /usr/local - review the log, or try 'brew link --overwrite awscli' or 'pip install awscli -U')"
    fi
  fi
}

function checkAwsVersion() {
  version=$(aws --version 2>&1 | cut -d ' ' -f 1 | cut -d '/' -f 2)
  info "Got current AWS CLI version $version"

  if ! isVersionGreaterOrEqual $version $aws_cli_min_version; then
    info "Your current version of the AWS CLI is too old ($version). We require $aws_cli_min_version or higher. Try 'brew upgrade awscli' or 'pip install awscli -U'." >&2
    executeOnOsFamily darwin 'brew update && brew upgrade awscli' upgrade-brew awscli
    executeOnOsFamily linux  'sudo pip install awscli -U' upgrade-pip awscli

    success=$?
    if [[ $success -ne 0 ]]; then
      fail "Failed to upgrade AWS CLI"
    fi

    # Recheck version
    version=$(aws --version 2>&1 | cut -d ' ' -f 1 | cut -d '/' -f 2)
    if ! isVersionGreaterOrEqual $version $aws_cli_min_version; then
      fail "Your version is still too old :("
    fi
  fi
}

function checkAwsConfigured() {
  if [ -n "$AWS_ACCESS_KEY_ID" ]; then
    ok "AWS CLI configured through env vars"
    return
  fi

  key=$(aws configure get aws_access_key_id)
  result=$?

  if [[ $result -eq 0 && -n "$key" ]]; then
    ok "AWS CLI is already configured"
    return
  fi

  warning "The AWS CLI tool needs to be configured with your authentication details"

  if [ -t 0 ]; then # stdin is a terminal
    aws configure

    key=$(aws configure get aws_access_key_id)
    result=$?

    if [[ $result -eq 0 && -n "$key" ]]; then
      ok "AWS CLI is now configured"
      return
    fi
  fi

  fail "AWS was not configured. Try running 'aws configure'"
}

function doLogIn() {
  login_command=$(aws ecr get-login --region=us-west-2)

  if [ $? -ne 0 ]; then
    fail "Could not get log in command from AWS CLI tool: $login_command"
  fi

  info "Logging in using command from AWS CLI"

  eval $login_command > build/ecr-login.log 2>&1

  if [ $? -ne 0 ]; then
    cat build/ecr-login.log
    fail "Could not log in to ECR"
  fi

  ok "All done: logged in, and docker authentication updated."
  exit 0
}

banner "Checking Docker -> AWS ECR authorization"

ensureBuildDir
checkDockerInstalled
checkAwsInstalled
checkAwsVersion
checkAwsConfigured
checkDockerConfigured
doLogIn
